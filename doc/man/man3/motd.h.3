.TH "src/motd.h" 3 "Tue Nov 2 2021" "motd" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/motd.h
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <stdbool\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <sys/statvfs\&.h>\fP
.br
\fC#include <sys/utsname\&.h>\fP
.br
\fC#include <sys/wait\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBfsinfo\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSTR_SIZE\fP   80"
.br
.RI "error numbers "
.ti -1c
.RI "#define \fBBSIZE\fP   6"
.br
.RI "99 999 (10^5-1) packages in total "
.ti -1c
.RI "#define \fBDISTRO\fP   40"
.br
.RI "max line length of /etc/lsb-release "
.ti -1c
.RI "#define \fBLINE\fP   192"
.br
.RI "max line length of /proc/mounts "
.ti -1c
.RI "#define \fBCOLOR_MAGENTA\fP   '\\033[38;5;197m'"
.br
.RI "Color Magenta\&. "
.ti -1c
.RI "#define \fBCOLOR_RESET\fP   '\\033[0m'"
.br
.ti -1c
.RI "#define \fBMCHECK\fP(ptr)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBfsinfo\fP \fBfsinfo\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBgreeting\fP (void)"
.br
.RI "prints the datetime and greeting message "
.ti -1c
.RI "void \fBsysinfo\fP (void)"
.br
.RI "prints system informations: kernel, distro, packages number "
.ti -1c
.RI "void \fBfsuse\fP (void)"
.br
.RI "gets and prints filesystem usage "
.ti -1c
.RI "void \fBgoodbye\fP (void)"
.br
.RI "goodbye message: wiki remainder + random quote from fortune "
.ti -1c
.RI "void \fBget_datetime\fP (char *time_string)"
.br
.RI "Get the datetime of the system\&. "
.ti -1c
.RI "char * \fBget_distro\fP (void)"
.br
.RI "Get the distro name\&. "
.ti -1c
.RI "\fBfsinfo\fP \fBget_fs_info\fP (const char *path)"
.br
.RI "Get filesystem informations\&. "
.ti -1c
.RI "void \fBprintfs\fP (const char *name, \fBfsinfo\fP fs)"
.br
.RI "Helps printing filesystem usage\&. "
.ti -1c
.RI "char ** \fBget_fs_mountpoint\fP (void)"
.br
.RI "Get the filesystems mountpoint\&. "
.ti -1c
.RI "char * \fBpipe_of\fP (const char op1[], const char op2[], int buffer_size)"
.br
.RI "emulates the UNIX pipe redirecting the op1 stdout to op2 stdin "
.ti -1c
.RI "void \fBstrsplit\fP (char *str, char *str_arr[])"
.br
.RI "split the given string into substrings (using space as delimiter) "
.ti -1c
.RI "int \fBget_pkgs_num\fP (void)"
.br
.RI "Get the pkgs num using alpm library\&. "
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBAuthor\fP
.RS 4
lotation (xlapsiu@gmail.com) 
.RE
.PP
\fBVersion\fP
.RS 4
0\&.1 
.RE
.PP
\fBDate\fP
.RS 4
2021-11-02
.RE
.PP
.SH "LICENSE"
.PP
This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version\&.
.PP
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE\&. See the GNU General Public License for more details at https://www.gnu.org/copyleft/gpl.html
.SH "DESCRIPTION"
.PP
This file has motd functions declaration 
.SH "Macro Definition Documentation"
.PP 
.SS "#define MCHECK(ptr)"
\fBValue:\fP
.PP
.nf
                        if (ptr == NULL) { \
                        fprintf(stderr, "Could not allocate memory\&.\n"); \
                        exit(EXIT_FAILURE); \
                    } \
.fi
.SS "#define STR_SIZE   80"

.PP
error numbers basic I/O malloc, free true, false, bool type strings utils time utilities POSIX api filesystem stats system relese, version, etc wait, waitpid length of time_string 
.SH "Function Documentation"
.PP 
.SS "void get_datetime (char * time_string)"

.PP
Get the datetime of the system\&. 
.PP
\fBParameters\fP
.RS 4
\fItime_string\fP formatted string with datetime to display in the first row 
.RE
.PP

.SS "char * get_distro (void)"

.PP
Get the distro name\&. 
.PP
\fBReturns\fP
.RS 4
char* name of the distro 
.RE
.PP

.SS "\fBfsinfo\fP get_fs_info (const char * path)"

.PP
Get filesystem informations\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP 
.RE
.PP
\fBReturns\fP
.RS 4
fsinfo 
.RE
.PP

.SS "char ** get_fs_mountpoint (void)"

.PP
Get the filesystems mountpoint\&. 
.PP
\fBReturns\fP
.RS 4
char** strings array with mountpoints 
.RE
.PP

.SS "int get_pkgs_num (void)"

.PP
Get the pkgs num using alpm library\&. 
.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP

.SS "char * pipe_of (const char op1[], const char op2[], int buffer_size)"

.PP
emulates the UNIX pipe redirecting the op1 stdout to op2 stdin 
.PP
\fBParameters\fP
.RS 4
\fIop1\fP first command 
.br
\fIop2\fP second command 
.br
\fIbuffer_size\fP size of the output buffer 
.RE
.PP
\fBReturns\fP
.RS 4
char* buffer with op2 output 
.RE
.PP

.SS "void printfs (const char * name, \fBfsinfo\fP fs)"

.PP
Helps printing filesystem usage\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP of the partition (it's typically the mountpoint) 
.br
\fIfs\fP struct with filesystem informations 
.RE
.PP

.SS "void strsplit (char * str, char * str_arr[])"

.PP
split the given string into substrings (using space as delimiter) 
.PP
\fBParameters\fP
.RS 4
\fIstr\fP phrase string 
.br
\fIstr_arr\fP result strings array 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for motd from the source code\&.
